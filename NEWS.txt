24.07.2014

1. Я исправил глюк с неправильным восстановлением функции на краях прямоугольника. Оказывается, причина была в неправильном вычислении значений функции, заданной таблицей. Линейная интерполяция тут не годится, функция получается разрывная, и маленькие погрешности в аргументе дают большие ошибки в значении. Использовал квадратичную интерполяцию, теперь работает нормально.

2. Проверил ещё раз качество восстановления функции по разности. Для функции на небольшом прямоугольнике (16 на 13 пикселей), принимающей значения от -1 до 1, восстановление по 1 паре разностей (т.е. с 1 сдвигом по x и по y) проходит теперь с максимальной погрешностью примерно 4%. По 2 парам разностей - примерно 2%. Попробовал добавить 3-ю пару разностей, 4-ю... но погрешность уменьшается всего на десятые доли процента.

3. Попробовал добавить к разностям случайный шум - нормально распределённый со среднеквадратичным отклонением 0.1 Увы, шум сильно ухудшает качество восстановления функции. Для 1 пары разностей получается максимальная погрешность порядка 40%, для 2 пар разностей - порядка 20%, а дальше уменьшается незначительно.

4. Сделал "интерферометрическую" функцию, то есть ту интенсивность света, которую выдаёт интерферометр. По файлам (которые output1i1.txt, output1i2.txt и т.п.) видно, что на картинке получатся горизонтальные и вертикальные полосы. Хорошо бы их визуализировать.

Попробовал восстановить функцию "в лоб", не определяя номеров полос. Восстановление не получилось - разность-то даже для исходной постоянной функции получается кусочно-постоянная. Соответственно программа говорит, что функций с такими разностями не бывает. :)

5. Начал делать восстановление границ полос. Ещё не доделал.

З.Ы. Новые интерферограммы ещё не смотрел.



6.08.2014

1. Начал делать восстановление функций, заданных не на прямоугольнике, а на произвольном множестве. Множество задаётся с помощью комбинации кругов и прямоугольников, которые можно поворачивать и смещать (все интерферограммы, которые я видел, можно задать таким образом). 

Пока что работает восстановление функции по разности на множествах, которые близки к выпуклым - можно назвать их "прямоугольно-выпуклыми". Практически любое множество можно задать как объединение прямоугольно-выпуклых. Например, кольцо, то есть разность двух кругов - это объединение 4 прямоугольно-выпуклых множеств: соответственно левой верхней, левой нижней, правой верхней и правой нижней частей кольца. Далее можно будет восстанавливать функцию на объединении прямоугольно-выпуклых множеств, последовательно восстанавливая её на каждом компоненте. Я пока думаю, как максимально автоматизировать этот процесс, чтобы не задавать все множества вручную.


2. Сделал первый этап восстановления границ полос. Если оценивать границы по значению функции, её первой и второй производной, то условия получаются очень строгие - мало какие из границ им удовлетворяют. Если только по значению и первой производной, то восстанавливается больше. Если только по значению - восстанавливается ещё больше, но при маленьких значениях погрешности оказывается совсем неустойчиво к случайному шуму: при добавлении шума границы совсем перестают определяться, а при больших значениях погрешности - граница получается "толстой", состоящей не из 1 линии, а из 2-3. Дальше работать с толстой границей будет совсем неудобно. Так что на маленьких простеньких примерах наиболее эффективным получается восстановление по значению функции и 1-й производной.

Вообще-то, я тут подумал, что требования к исходной функции оказываются слишком ограничивающие. При восстановлении функции по разности предполагается только, что она удовлетворяет условию Гёльдера, а при определении полос требуется дифференцируемость, да не просто, а дважды дифференцируемость! Возможно, это неправильно (хотя, если функция на большей части области определения равна 0, то она там же и дважды дифференцируема, так что границы почти везде определятся правильно). Если не предполагать дважды дифференцируемости, то нельзя использовать 2-ю производную. Тогда при определении направления полос придётся оценивать градиенты по всем возможным направлениям. Если не предполагать дифференцируемости, то и градиент использовать нельзя - можно только брать вместо него конечные приращения функции и проверять, положительны они или отрицательны.


3. Посмотрел интерферограммы. На первый взгляд, ничего страшного. Пока не успел сделать закачивание из файлов - видимо, теперь займусь этим. Всё-таки, работоспособность алгоритма лучше оценивать на реальных примерах, а не искусственных. Наверно, начну с тех интерферограмм, которые заданы в кольце. 